// –ü–æ–ª–Ω–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è server/src/services/monitoringService.js

const { Connection, PublicKey } = require('@solana/web3.js');
const { fetchTokenMetadata, redis } = require('./tokenService');
const Database = require('../database/connection');
const Redis = require('ioredis');

class WalletMonitoringService {
    constructor() {
        this.db = new Database();
        this.connection = new Connection(process.env.SOLANA_RPC_URL || 'http://45.134.108.167:5005', {
            commitment: 'confirmed',
            httpHeaders: { 'Connection': 'keep-alive' }
        });
        this.isMonitoring = false;
        this.processedSignatures = new Set();
        this.recentlyProcessed = new Set();
        this.stats = {
            totalScans: 0,
            totalWallets: 0,
            totalBuyTransactions: 0,
            totalSellTransactions: 0,
            errors: 0,
            lastScanDuration: 0,
            startTime: Date.now(),
        };
        this.redis = new Redis(process.env.REDIS_URL || 'redis://default:CwBXeFAGuARpNfwwziJyFttVApFFFyGD@switchback.proxy.rlwy.net:25212');
        this.isProcessingQueue = false;
        this.queueKey = 'webhook:queue';
        this.batchSize = 400;
        console.log(`[${new Date().toISOString()}] üîß MonitoringService initialized`);
    }

    startMonitoring() {
        console.log('‚ö†Ô∏è Legacy monitoring is deprecated. Use WebSocket service instead.');
        this.isMonitoring = false;
    }

    stopMonitoring() {
        this.isMonitoring = false;
        console.log('‚èπÔ∏è Legacy monitoring stopped');
    }

    async processQueue() {
        if (this.isProcessingQueue) return;
        this.isProcessingQueue = true;
    
        while (true) {
            const requestData = await this.redis.lpop(this.queueKey, this.batchSize);
            if (!requestData || requestData.length === 0) break;
    
            const requests = requestData.map((data) => {
                try {
                    return JSON.parse(data);
                } catch (error) {
                    console.error(`[${new Date().toISOString()}] ‚ùå Invalid queue entry:`, error.message);
                    return null;
                }
            }).filter((req) => req !== null);
    
            if (requests.length === 0) continue;
    
            console.log(`[${new Date().toISOString()}] üîÑ Processing batch of ${requests.length} signatures`);
    
            const batchResults = await Promise.all(
                requests.map(async (request) => {
                    const { signature, walletAddress, blockTime } = request;
                    try {
                        const wallet = await this.db.getWalletByAddress(walletAddress);
                        if (!wallet) {
                            console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Wallet ${walletAddress} not found`);
                            return null;
                        }
    
                        const txData = await this.processTransaction({ signature, blockTime }, wallet);
                        if (txData) {
                            console.log(`[${new Date().toISOString()}] ‚úÖ Processed transaction ${signature}`);
                            return {
                                signature,
                                walletAddress,
                                walletName: wallet.name,
                                groupId: wallet.group_id,
                                groupName: wallet.group_name,
                                transactionType: txData.type,
                                solAmount: txData.solAmount,
                                tokens: txData.tokensChanged.map((tc) => ({
                                    mint: tc.mint,
                                    amount: tc.change || tc.rawChange / Math.pow(10, tc.decimals),
                                    symbol: tc.symbol,
                                    name: tc.name,
                                })),
                                timestamp: new Date(blockTime * 1000).toISOString(),
                            };
                        }
                        return null;
                    } catch (error) {
                        console.error(`[${new Date().toISOString()}] ‚ùå Error processing signature ${signature}:`, error.message);
                        return null;
                    }
                })
            );
    
            const successfulTxs = batchResults.filter((tx) => tx !== null);
            if (successfulTxs.length > 0) {
                const pipeline = this.redis.pipeline();
                successfulTxs.forEach((tx) => {
                    pipeline.publish('transactions', JSON.stringify(tx));
                });
                await pipeline.exec();
            }
        }
    
        this.isProcessingQueue = false;
        const queueLength = await this.redis.llen(this.queueKey);
        if (queueLength > 0) {
            setImmediate(() => this.processQueue());
        }
    }

    async processWebhookMessage(message) {
        const { signature, walletAddress, blockTime } = message;
        const requestId = require('uuid').v4();
        await this.redis.lpush(this.queueKey, JSON.stringify({
            requestId,
            signature,
            walletAddress,
            blockTime,
            timestamp: Date.now(),
        }));
        console.log(`[${new Date().toISOString()}] üì§ Enqueued signature ${signature}`);

        if (!this.isProcessingQueue) {
            setImmediate(() => this.processQueue());
        }
    }

    async fetchTransactionWithRetry(signature, maxRetries = 3) {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                console.log(`[${new Date().toISOString()}] üîÑ Fetching transaction ${signature} (attempt ${attempt}/${maxRetries})`);
                
                const options = {
                    maxSupportedTransactionVersion: 0,
                    commitment: 'confirmed',
                };
    
                const tx = await this.connection.getParsedTransaction(signature, options);
                
                if (!tx) {
                    console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Transaction ${signature} not found (attempt ${attempt})`);
                    if (attempt < maxRetries) {
                        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
                        continue;
                    }
                    return null;
                }
    
                if (tx.meta?.err) {
                    console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Transaction ${signature} failed:`, tx.meta.err);
                    return null;
                }
    
                console.log(`[${new Date().toISOString()}] ‚úÖ Successfully fetched transaction ${signature}`);
                console.log(`[${new Date().toISOString()}] üìä Transaction info:`);
                console.log(`  - Version: ${tx.version || 'legacy'}`);
                console.log(`  - Status: ${tx.meta?.err ? 'Failed' : 'Success'}`);
                console.log(`  - Fee: ${(tx.meta?.fee || 0) / 1e9} SOL`);
                console.log(`  - Account keys: ${tx.transaction?.message?.accountKeys?.length || 0}`);
                console.log(`  - Instructions: ${tx.transaction?.message?.instructions?.length || 0}`);
                console.log(`  - Pre-token balances: ${tx.meta?.preTokenBalances?.length || 0}`);
                console.log(`  - Post-token balances: ${tx.meta?.postTokenBalances?.length || 0}`);
    
                return tx;
            } catch (error) {
                console.error(`[${new Date().toISOString()}] ‚ùå Error fetching transaction ${signature} (attempt ${attempt}):`, error.message);
                
                if (attempt < maxRetries) {
                    console.log(`[${new Date().toISOString()}] ‚è≥ Waiting before retry...`);
                    await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
                }
            }
        }
        
        console.error(`[${new Date().toISOString()}] ‚ùå Failed to fetch transaction ${signature} after ${maxRetries} attempts`);
        return null;
    }

    async processTransaction(sig, wallet) {
        try {
            if (!sig.signature || !sig.blockTime) {
                console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Invalid signature object:`, sig);
                return null;
            }

            // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
            const existingTx = await this.db.pool.query(
                'SELECT id FROM transactions WHERE signature = $1 AND wallet_id = $2',
                [sig.signature, wallet.id]
            );
            if (existingTx.rows.length > 0) {
                console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Transaction ${sig.signature} already processed for wallet ${wallet.address}`);
                return null;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            const processedKey = `${sig.signature}-${wallet.id}`;
            if (this.recentlyProcessed && this.recentlyProcessed.has(processedKey)) {
                console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Transaction ${sig.signature} recently processed for wallet ${wallet.address}`);
                return null;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –Ω–µ–¥–∞–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            this.recentlyProcessed.add(processedKey);

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
            if (this.recentlyProcessed.size > 1000) {
                const toDelete = Array.from(this.recentlyProcessed).slice(0, 500);
                toDelete.forEach(key => this.recentlyProcessed.delete(key));
            }

            console.log(`[${new Date().toISOString()}] üîç Processing transaction ${sig.signature} for wallet ${wallet.address}`);

            const tx = await this.fetchTransactionWithRetry(sig.signature);

            if (!tx || !tx.meta || !tx.meta.preBalances || !tx.meta.postBalances) {
                console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Invalid transaction ${sig.signature} - missing metadata`);
                return null;
            }

            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ accountKeys
            const walletPubkey = wallet.address;
            let walletIndex = -1;
            
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ versioned transactions
            if (tx.transaction.message.accountKeys) {
                if (Array.isArray(tx.transaction.message.accountKeys)) {
                    // Legacy transaction
                    walletIndex = tx.transaction.message.accountKeys.findIndex(
                        (key) => key.pubkey ? key.pubkey.toString() === walletPubkey : key.toString() === walletPubkey
                    );
                } else {
                    // –í–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    console.log(`[${new Date().toISOString()}] üîç Non-standard accountKeys format, attempting to parse...`);
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ staticAccountKeys –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
                    if (tx.transaction.message.staticAccountKeys) {
                        walletIndex = tx.transaction.message.staticAccountKeys.findIndex(
                            (key) => key.toString() === walletPubkey
                        );
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ addressTableLookups
                    if (walletIndex === -1 && tx.transaction.message.addressTableLookups) {
                        console.log(`[${new Date().toISOString()}] üîç Checking address table lookups...`);
                        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º versioned transactions —Å address lookups
                        console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Versioned transaction with address table lookups not fully supported yet`);
                        return null;
                    }
                }
            }

            if (walletIndex === -1) {
                console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Wallet ${walletPubkey} not found in transaction ${sig.signature}`);
                return null;
            }

            // ========== –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ==========
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –î–û –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const tokenChanges = await this.analyzeAllTokenChanges(tx.meta, walletIndex);
            
            console.log(`[${new Date().toISOString()}] üîç Found ${tokenChanges.length} token changes:`, 
                tokenChanges.map(tc => `${tc.symbol}: ${tc.change > 0 ? '+' : ''}${tc.change.toFixed(6)}`));

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ç–æ–∫–µ–Ω–æ–≤
            const transactionAnalysis = this.analyzeTransactionType(tokenChanges, tx.meta, walletIndex);
            
            if (!transactionAnalysis) {
                console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Transaction ${sig.signature} - not a token trade`);
                return null;
            }

            const { transactionType, solAmount, relevantTokenChanges } = transactionAnalysis;

            console.log(`[${new Date().toISOString()}] ‚úÖ Detected ${transactionType.toUpperCase()} transaction: ${solAmount.toFixed(6)} SOL equivalent`);
            console.log(`[${new Date().toISOString()}] ü™ô Relevant tokens: ${relevantTokenChanges.length}`);

            if (relevantTokenChanges.length === 0) {
                console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Transaction ${sig.signature} - no relevant token changes`);
                return null;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return await this.db.withTransaction(async (client) => {
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
                const finalCheck = await client.query(
                    'SELECT id FROM transactions WHERE signature = $1 AND wallet_id = $2',
                    [sig.signature, wallet.id]
                );
                
                if (finalCheck.rows.length > 0) {
                    console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Transaction ${sig.signature} already exists, skipping insert`);
                    return null;
                }

                const query = `
                    INSERT INTO transactions (
                        wallet_id, signature, block_time, transaction_type,
                        sol_spent, sol_received
                    ) 
                    VALUES ($1, $2, $3, $4, $5, $6)
                    RETURNING id, signature, transaction_type
                `;
                const result = await client.query(query, [
                    wallet.id,
                    sig.signature,
                    new Date(sig.blockTime * 1000).toISOString(),
                    transactionType,
                    transactionType === 'buy' ? solAmount : 0,
                    transactionType === 'sell' ? solAmount : 0,
                ]);

                if (result.rows.length === 0) {
                    console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Transaction ${sig.signature} was already inserted by another process`);
                    return null;
                }

                const transaction = result.rows[0];
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
                const tokenSavePromises = relevantTokenChanges.map((tokenChange) =>
                    this.saveTokenOperationInTransaction(client, transaction.id, tokenChange, transactionType)
                );
                await Promise.all(tokenSavePromises);

                console.log(`[${new Date().toISOString()}] ‚úÖ Successfully saved transaction ${sig.signature} with ${relevantTokenChanges.length} token operations`);

                return {
                    signature: sig.signature,
                    type: transactionType,
                    solAmount,
                    tokensChanged: relevantTokenChanges,
                };
            });
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error processing transaction ${sig.signature}:`, error.message);
            console.error(`[${new Date().toISOString()}] ‚ùå Stack trace:`, error.stack);
            return null;
        }
    }

    // ========== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ==========

    analyzeTransactionType(tokenChanges, meta, walletIndex) {
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        const STABLECOINS = {
            'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v': { symbol: 'USDC', decimals: 6 }, // USDC
            'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB': { symbol: 'USDT', decimals: 6 }, // USDT
            'So11111111111111111111111111111111111111112': { symbol: 'WSOL', decimals: 9 },    // Wrapped SOL
        };
        
        const NATIVE_SOL_CHANGE_THRESHOLD = 0.01; // 0.01 SOL –º–∏–Ω–∏–º—É–º –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∫–∞–∫ SOL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        const STABLECOIN_THRESHOLD = 0.1; // 0.1 USD –º–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
        const TOKEN_THRESHOLD = 0.001; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ SOL
        const preBalance = meta.preBalances[walletIndex] || 0;
        const postBalance = meta.postBalances[walletIndex] || 0;
        const nativeSolChange = (postBalance - preBalance) / 1e9;
        
        console.log(`[${new Date().toISOString()}] üí∞ Native SOL change: ${nativeSolChange.toFixed(6)} SOL`);
        
        // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –æ–±—ã—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        const stablecoinChanges = [];
        const tokenOnlyChanges = [];
        
        for (const change of tokenChanges) {
            if (STABLECOINS[change.mint]) {
                stablecoinChanges.push({
                    ...change,
                    isStablecoin: true,
                    stablecoinInfo: STABLECOINS[change.mint]
                });
            } else {
                tokenOnlyChanges.push(change);
            }
        }
        
        console.log(`[${new Date().toISOString()}] üìä Analysis: ${stablecoinChanges.length} stablecoin changes, ${tokenOnlyChanges.length} token changes`);
        
        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        console.log(`[${new Date().toISOString()}] üìã Detailed changes:`);
        stablecoinChanges.forEach(sc => {
            console.log(`  üí∞ ${sc.stablecoinInfo.symbol}: ${sc.change > 0 ? '+' : ''}${sc.change.toFixed(6)}`);
        });
        tokenOnlyChanges.forEach(tc => {
            console.log(`  ü™ô ${tc.symbol}: ${tc.change > 0 ? '+' : ''}${tc.change.toFixed(6)}`);
        });
        
        // ========== –°–¶–ï–ù–ê–†–ò–ô 1: –¢–†–ê–î–ò–¶–ò–û–ù–ù–ê–Ø SOL –¢–û–†–ì–û–í–õ–Ø ==========
        if (Math.abs(nativeSolChange) >= NATIVE_SOL_CHANGE_THRESHOLD) {
            console.log(`[${new Date().toISOString()}] üîÑ Traditional SOL trading detected`);
            
            if (nativeSolChange < -NATIVE_SOL_CHANGE_THRESHOLD && tokenOnlyChanges.some(tc => tc.change > TOKEN_THRESHOLD)) {
                // SOL –ø–æ—Ç—Ä–∞—á–µ–Ω + —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã = –ø–æ–∫—É–ø–∫–∞ –∑–∞ SOL
                const relevantTokens = tokenOnlyChanges.filter(tc => tc.change > TOKEN_THRESHOLD);
                console.log(`[${new Date().toISOString()}] ‚úÖ SOL BUY detected: ${Math.abs(nativeSolChange).toFixed(6)} SOL ‚Üí ${relevantTokens.length} tokens`);
                return {
                    transactionType: 'buy',
                    solAmount: Math.abs(nativeSolChange),
                    relevantTokenChanges: relevantTokens
                };
            } else if (nativeSolChange > NATIVE_SOL_CHANGE_THRESHOLD && tokenOnlyChanges.some(tc => tc.change < -TOKEN_THRESHOLD)) {
                // SOL –ø–æ–ª—É—á–µ–Ω + —Ç–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã = –ø—Ä–æ–¥–∞–∂–∞ –∑–∞ SOL
                const relevantTokens = tokenOnlyChanges.filter(tc => tc.change < -TOKEN_THRESHOLD);
                console.log(`[${new Date().toISOString()}] ‚úÖ SOL SELL detected: ${relevantTokens.length} tokens ‚Üí ${nativeSolChange.toFixed(6)} SOL`);
                return {
                    transactionType: 'sell',
                    solAmount: nativeSolChange,
                    relevantTokenChanges: relevantTokens.map(rt => ({...rt, change: Math.abs(rt.change)}))
                };
            }
        }
        
        // ========== –°–¶–ï–ù–ê–†–ò–ô 2: –¢–û–†–ì–û–í–õ–Ø –ß–ï–†–ï–ó –°–¢–ï–ô–ë–õ–ö–û–ò–ù–´ ==========
        if (stablecoinChanges.length > 0 && tokenOnlyChanges.length > 0) {
            console.log(`[${new Date().toISOString()}] üí± Stablecoin trading detected`);
            
            // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞)
            const primaryStablecoin = stablecoinChanges.reduce((max, current) => 
                Math.abs(current.change) > Math.abs(max.change) ? current : max
            );
            
            console.log(`[${new Date().toISOString()}] üí∞ Primary trading currency: ${primaryStablecoin.stablecoinInfo.symbol} change: ${primaryStablecoin.change.toFixed(6)}`);
            
            if (primaryStablecoin.change < -STABLECOIN_THRESHOLD) { // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω –ø–æ—Ç—Ä–∞—á–µ–Ω
                // –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
                const boughtTokens = tokenOnlyChanges.filter(tc => tc.change > TOKEN_THRESHOLD);
                if (boughtTokens.length > 0) {
                    const solEquivalent = this.convertToSolEquivalent(Math.abs(primaryStablecoin.change), primaryStablecoin.stablecoinInfo.symbol);
                    console.log(`[${new Date().toISOString()}] ‚úÖ STABLECOIN BUY detected: ${Math.abs(primaryStablecoin.change).toFixed(6)} ${primaryStablecoin.stablecoinInfo.symbol} ‚Üí ${boughtTokens.length} tokens (${solEquivalent.toFixed(6)} SOL equiv)`);
                    return {
                        transactionType: 'buy',
                        solAmount: solEquivalent,
                        relevantTokenChanges: boughtTokens,
                        primaryCurrency: primaryStablecoin.stablecoinInfo.symbol
                    };
                }
            } else if (primaryStablecoin.change > STABLECOIN_THRESHOLD) { // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω –ø–æ–ª—É—á–µ–Ω
                // –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
                const soldTokens = tokenOnlyChanges.filter(tc => tc.change < -TOKEN_THRESHOLD);
                if (soldTokens.length > 0) {
                    const solEquivalent = this.convertToSolEquivalent(primaryStablecoin.change, primaryStablecoin.stablecoinInfo.symbol);
                    console.log(`[${new Date().toISOString()}] ‚úÖ STABLECOIN SELL detected: ${soldTokens.length} tokens ‚Üí ${primaryStablecoin.change.toFixed(6)} ${primaryStablecoin.stablecoinInfo.symbol} (${solEquivalent.toFixed(6)} SOL equiv)`);
                    return {
                        transactionType: 'sell',
                        solAmount: solEquivalent,
                        relevantTokenChanges: soldTokens.map(st => ({...st, change: Math.abs(st.change)})),
                        primaryCurrency: primaryStablecoin.stablecoinInfo.symbol
                    };
                }
            }
        }
        
        // ========== –°–¶–ï–ù–ê–†–ò–ô 3: –¢–û–õ–¨–ö–û WRAPPED SOL ==========
        const wsolChange = stablecoinChanges.find(sc => sc.mint === 'So11111111111111111111111111111111111111112');
        if (wsolChange && tokenOnlyChanges.length > 0 && Math.abs(nativeSolChange) < NATIVE_SOL_CHANGE_THRESHOLD) {
            console.log(`[${new Date().toISOString()}] üîÑ Wrapped SOL trading detected`);
            
            if (wsolChange.change < -TOKEN_THRESHOLD && tokenOnlyChanges.some(tc => tc.change > TOKEN_THRESHOLD)) {
                // WSOL –ø–æ—Ç—Ä–∞—á–µ–Ω + —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã = –ø–æ–∫—É–ø–∫–∞
                const relevantTokens = tokenOnlyChanges.filter(tc => tc.change > TOKEN_THRESHOLD);
                console.log(`[${new Date().toISOString()}] ‚úÖ WSOL BUY detected: ${Math.abs(wsolChange.change).toFixed(6)} WSOL ‚Üí ${relevantTokens.length} tokens`);
                return {
                    transactionType: 'buy',
                    solAmount: Math.abs(wsolChange.change),
                    relevantTokenChanges: relevantTokens
                };
            } else if (wsolChange.change > TOKEN_THRESHOLD && tokenOnlyChanges.some(tc => tc.change < -TOKEN_THRESHOLD)) {
                // WSOL –ø–æ–ª—É—á–µ–Ω + —Ç–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã = –ø—Ä–æ–¥–∞–∂–∞
                const relevantTokens = tokenOnlyChanges.filter(tc => tc.change < -TOKEN_THRESHOLD);
                console.log(`[${new Date().toISOString()}] ‚úÖ WSOL SELL detected: ${relevantTokens.length} tokens ‚Üí ${wsolChange.change.toFixed(6)} WSOL`);
                return {
                    transactionType: 'sell',
                    solAmount: wsolChange.change,
                    relevantTokenChanges: relevantTokens.map(rt => ({...rt, change: Math.abs(rt.change)}))
                };
            }
        }
        
        console.log(`[${new Date().toISOString()}] ‚ùì No clear trading pattern detected`);
        console.log(`[${new Date().toISOString()}] üîç Summary: SOL change: ${nativeSolChange.toFixed(6)}, Stablecoins: ${stablecoinChanges.length}, Tokens: ${tokenOnlyChanges.length}`);
        return null;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ –≤ SOL —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
    convertToSolEquivalent(amount, currency) {
        // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SOL —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ
        const SOL_PRICE_USD = 150; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ SOL –≤ USD
        
        switch (currency) {
            case 'USDC':
            case 'USDT':
                return amount / SOL_PRICE_USD;
            case 'WSOL':
                return amount; // WSOL —É–∂–µ –≤ SOL
            default:
                return amount / SOL_PRICE_USD; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ USD
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –í–°–ï–• –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤
   async analyzeAllTokenChanges(meta, walletIndex) {
    const WRAPPED_SOL_MINT = 'So11111111111111111111111111111111111111112';
    const tokenChanges = [];

    console.log(`[${new Date().toISOString()}] üîç Analyzing ALL token changes (including stablecoins)`);
    console.log(`Pre-token balances: ${meta.preTokenBalances?.length || 0}, Post-token balances: ${meta.postTokenBalances?.length || 0}`);

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ accountKeys
    let targetWalletAddress = null;
    if (walletIndex >= 0 && meta.preBalances && meta.postBalances) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ transaction.message.accountKeys –ø–æ –∏–Ω–¥–µ–∫—Å—É
        const tx = meta; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ meta —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        // –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ mint + accountIndex
    const allBalanceChanges = new Map();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å pre-balances
    for (const pre of meta.preTokenBalances || []) {
        const key = `${pre.mint}-${pre.accountIndex}`;
        allBalanceChanges.set(key, {
            mint: pre.mint,
            accountIndex: pre.accountIndex,
            owner: pre.owner,
            preAmount: pre.uiTokenAmount.amount,
            preUiAmount: pre.uiTokenAmount.uiAmount,
            postAmount: '0',
            postUiAmount: 0,
            decimals: pre.uiTokenAmount.decimals
        });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º post-balances
    for (const post of meta.postTokenBalances || []) {
        const key = `${post.mint}-${post.accountIndex}`;
        if (allBalanceChanges.has(key)) {
            const existing = allBalanceChanges.get(key);
            existing.postAmount = post.uiTokenAmount.amount;
            existing.postUiAmount = post.uiTokenAmount.uiAmount;
        } else {
            allBalanceChanges.set(key, {
                mint: post.mint,
                accountIndex: post.accountIndex,
                owner: post.owner,
                preAmount: '0',
                preUiAmount: 0,
                postAmount: post.uiTokenAmount.amount,
                postUiAmount: post.uiTokenAmount.uiAmount,
                decimals: post.uiTokenAmount.decimals
            });
        }
    }

    console.log(`[${new Date().toISOString()}] üìä Found ${allBalanceChanges.size} balance changes to analyze`);

    // –ì–†–£–ü–ü–ò–†–£–ï–ú –ü–û MINT –ò –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û –ö–û–®–ï–õ–¨–ö–£
    const mintChanges = new Map();

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    for (const [key, change] of allBalanceChanges) {
        const rawChange = Number(change.postAmount) - Number(change.preAmount);
        const uiChange = Number(change.postUiAmount) - Number(change.preUiAmount);
        
        console.log(`[${new Date().toISOString()}] ü™ô Token ${change.mint}:`);
        console.log(`  - Account Index: ${change.accountIndex}`);
        console.log(`  - Owner: ${change.owner}`);
        console.log(`  - Raw change: ${rawChange}`);
        console.log(`  - UI change: ${uiChange}`);
        console.log(`  - Decimals: ${change.decimals}`);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–≤–Ω—ã–µ –Ω—É–ª—é
        if (Math.abs(uiChange) < 0.000001) {
            console.log(`[${new Date().toISOString()}] ‚è≠Ô∏è Skipping zero change for ${change.mint}`);
            continue;
        }

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        // –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (!mintChanges.has(change.mint)) {
            mintChanges.set(change.mint, {
                mint: change.mint,
                decimals: change.decimals,
                changes: [] // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            });
        }

        mintChanges.get(change.mint).changes.push({
            owner: change.owner,
            accountIndex: change.accountIndex,
            uiChange: uiChange,
            rawChange: rawChange
        });
    }

    if (mintChanges.size === 0) {
        console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è No token changes found`);
        return [];
    }

    console.log(`[${new Date().toISOString()}] üì¶ Fetching metadata for ${mintChanges.size} unique tokens`);

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
    const mints = Array.from(mintChanges.keys());
    const tokenInfos = await this.batchFetchTokenMetadata(mints);

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤
    for (const [mint, tokenData] of mintChanges) {
        const tokenInfo = tokenInfos.get(mint) || {
            symbol: mint === WRAPPED_SOL_MINT ? 'WSOL' : 'Unknown',
            name: mint === WRAPPED_SOL_MINT ? 'Wrapped SOL' : 'Unknown Token',
            decimals: tokenData.decimals,
        };

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ê–ì–†–ï–ì–ê–¶–ò–ò: –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ –º–æ–¥—É–ª—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        // –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        let significantChange = null;
        let maxAbsChange = 0;

        for (const change of tokenData.changes) {
            const absChange = Math.abs(change.uiChange);
            if (absChange > maxAbsChange && absChange > 0.001) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                maxAbsChange = absChange;
                significantChange = change;
            }
        }

        if (significantChange) {
            tokenChanges.push({
                mint: mint,
                change: significantChange.uiChange,
                rawChange: significantChange.rawChange,
                decimals: tokenData.decimals,
                symbol: tokenInfo.symbol,
                name: tokenInfo.name,
                owner: significantChange.owner,
                accountIndex: significantChange.accountIndex
            });

            console.log(`[${new Date().toISOString()}] ‚úÖ Added significant token change: ${tokenInfo.symbol} = ${significantChange.uiChange.toFixed(6)} (owner: ${significantChange.owner})`);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –±–µ—Ä–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            const totalChange = tokenData.changes.reduce((sum, ch) => sum + ch.uiChange, 0);
            const totalRawChange = tokenData.changes.reduce((sum, ch) => sum + ch.rawChange, 0);
            
            if (Math.abs(totalChange) > 0.001) {
                tokenChanges.push({
                    mint: mint,
                    change: totalChange,
                    rawChange: totalRawChange,
                    decimals: tokenData.decimals,
                    symbol: tokenInfo.symbol,
                    name: tokenInfo.name,
                });

                console.log(`[${new Date().toISOString()}] ‚úÖ Added aggregated token change: ${tokenInfo.symbol} = ${totalChange.toFixed(6)}`);
            } else {
                console.log(`[${new Date().toISOString()}] ‚è≠Ô∏è Skipping insignificant changes for ${tokenInfo.symbol} (total: ${totalChange.toFixed(6)})`);
            }
        }
    }

    console.log(`[${new Date().toISOString()}] üéØ Final result: ${tokenChanges.length} significant token changes`);
    return tokenChanges;
}

    async analyzeTokenChanges(meta, transactionType) {
        console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è Using legacy analyzeTokenChanges - consider using analyzeAllTokenChanges instead`);
        
        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const allChanges = await this.analyzeAllTokenChanges(meta, -1); // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const relevantChanges = allChanges.filter(change => {
            if (transactionType === 'buy') {
                return change.change > 0; // –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è
            } else if (transactionType === 'sell') {
                return change.change < 0; // –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–∫–µ–Ω—ã —É–º–µ–Ω—å—à–∞—é—Ç—Å—è
            }
            return true;
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return relevantChanges.map(change => ({
            mint: change.mint,
            rawChange: Math.abs(change.rawChange),
            decimals: change.decimals,
            symbol: change.symbol,
            name: change.name,
        }));
    }

    async analyzeTokenChangesVersioned(meta, transactionType, accountKeys) {
        console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è Using legacy analyzeTokenChangesVersioned - consider using analyzeAllTokenChanges instead`);
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫ –Ω–æ–≤–æ–º—É –º–µ—Ç–æ–¥—É
        return await this.analyzeTokenChanges(meta, transactionType);
    }

    async batchFetchTokenMetadata(mints) {
        const tokenInfos = new Map();
        const uncachedMints = [];
        const pipeline = this.redis.pipeline();

        for (const mint of mints) {
            pipeline.get(`token:${mint}`);
        }
        const results = await pipeline.exec();

        results.forEach(([err, cachedToken], index) => {
            if (!err && cachedToken) {
                tokenInfos.set(mints[index], JSON.parse(cachedToken));
            } else {
                uncachedMints.push(mints[index]);
            }
        });

        if (uncachedMints.length > 0) {
            const batchSize = 10;
            for (let i = 0; i < uncachedMints.length; i += batchSize) {
                const batch = uncachedMints.slice(i, i + batchSize);
                const batchResults = await Promise.all(
                    batch.map(async (mint) => {
                        const tokenInfo = await fetchTokenMetadata(mint, this.connection);
                        return { mint, tokenInfo };
                    })
                );
                const pipeline = this.redis.pipeline();
                batchResults.forEach(({ mint, tokenInfo }) => {
                    if (tokenInfo) {
                        tokenInfos.set(mint, tokenInfo);
                        pipeline.set(`token:${mint}`, JSON.stringify(tokenInfo), 'EX', 24 * 60 * 60);
                    }
                });
                await pipeline.exec();
            }
        }

        return tokenInfos;
    }

    async saveTokenOperationInTransaction(client, transactionId, tokenChange, transactionType) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â—É—é—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë
            let tokenInfo = {
                symbol: tokenChange.symbol,
                name: tokenChange.name,
                decimals: tokenChange.decimals
            };

            // –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
            if (!tokenInfo.symbol || tokenInfo.symbol === 'Unknown') {
                const fetchedInfo = await fetchTokenMetadata(tokenChange.mint, this.connection);
                if (fetchedInfo) {
                    tokenInfo = fetchedInfo;
                }
            }

            const tokenUpsertQuery = `
                INSERT INTO tokens (mint, symbol, name, decimals) 
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (mint) DO UPDATE SET
                    symbol = EXCLUDED.symbol,
                    name = EXCLUDED.name,
                    decimals = EXCLUDED.decimals,
                    updated_at = CURRENT_TIMESTAMP
                RETURNING id
            `;
            const tokenResult = await client.query(tokenUpsertQuery, [
                tokenChange.mint,
                tokenInfo.symbol,
                tokenInfo.name,
                tokenInfo.decimals,
            ]);

            const tokenId = tokenResult.rows[0].id;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º change –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
            const amount = Math.abs(tokenChange.change);

            const operationQuery = `
                INSERT INTO token_operations (transaction_id, token_id, amount, operation_type) 
                VALUES ($1, $2, $3, $4)
            `;
            await client.query(operationQuery, [transactionId, tokenId, amount, transactionType]);
            
            console.log(`[${new Date().toISOString()}] üíæ Saved token operation: ${tokenInfo.symbol} amount: ${amount} type: ${transactionType}`);
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error saving token operation:`, error.message);
            throw error;
        }
    }

    async addWallet(address, name = null, groupId = null) {
        try {
            new PublicKey(address);
            const wallet = await this.db.addWallet(address, name, groupId);
            console.log(`[${new Date().toISOString()}] ‚úÖ Added wallet: ${name || address.slice(0, 8)}... to group ${groupId || 'none'}`);
            return wallet;
        } catch (error) {
            throw new Error(`Failed to add wallet: ${error.message}`);
        }
    }

    async removeWallet(address) {
        try {
            const wallet = await this.db.getWalletByAddress(address);
            if (wallet) {
                const transactions = await this.db.getRecentTransactions(24 * 7);
                const walletSignatures = transactions
                    .filter((tx) => tx.wallet_address === address)
                    .map((tx) => tx.signature);
                walletSignatures.forEach((sig) => this.processedSignatures.delete(sig));
                await this.db.removeWallet(address);
                console.log(`[${new Date().toISOString()}] üóëÔ∏è Removed wallet: ${address.slice(0, 8)}...`);
            } else {
                throw new Error('Wallet not found');
            }
        } catch (error) {
            throw new Error(`Failed to remove wallet: ${error.message}`);
        }
    }

    async removeAllWallets(groupId = null) {
        try {
            console.log(`[${new Date().toISOString()}] üóëÔ∏è Removing all wallets from monitoring service${groupId ? ` for group ${groupId}` : ''}`);
            const transactions = await this.db.getRecentTransactions(24 * 7, 400, null, groupId);
            const allSignatures = transactions.map((tx) => tx.signature);
            allSignatures.forEach((sig) => this.processedSignatures.delete(sig));
            if (!groupId) {
                this.processedSignatures.clear();
                this.recentlyProcessed.clear(); // –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–µ–¥–∞–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            }
            await this.db.removeAllWallets(groupId);
            console.log(`[${new Date().toISOString()}] ‚úÖ All wallets removed from monitoring service${groupId ? ` for group ${groupId}` : ''}`);
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error removing all wallets from monitoring service:`, error.message);
            throw error;
        }
    }

    getStatus() {
        return {
            isMonitoring: this.isMonitoring,
            processedSignatures: this.processedSignatures.size,
            rpcEndpoint: this.connection.rpcEndpoint,
            stats: {
                ...this.stats,
                uptime: Date.now() - this.stats.startTime,
            },
        };
    }

    async getDetailedStats(groupId = null) {
        try {
            const dbStats = await this.db.getMonitoringStats(groupId);
            const topTokens = await this.db.getTopTokens(5, null, groupId);
            return {
                ...this.getStatus(),
                database: dbStats,
                topTokens,
            };
        } catch (error) {
            console.error('‚ùå Error getting detailed stats:', error.message);
            return this.getStatus();
        }
    }

    async close() {
        this.stopMonitoring();
        await this.redis.quit();
        await this.db.close();
        console.log(`[${new Date().toISOString()}] ‚úÖ Monitoring service closed`);
    }
}

module.exports = WalletMonitoringService;// –ü–æ–ª–Ω–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è server/src/services/monitoringService.js