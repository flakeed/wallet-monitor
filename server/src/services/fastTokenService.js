const axios = require('axios');
const Redis = require('ioredis');

class FastTokenService {
    constructor() {
        this.redis = new Redis(process.env.REDIS_URL || 'redis://default:CwBXeFAGuARpNfwwziJyFttVApFFFyGD@switchback.proxy.rlwy.net:25212');
        
        // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–µ—à–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        this.tokenCache = new Map();
        this.priceCache = new Map();
        
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        this.TOKEN_CACHE_TTL = 3600; // 1 —á–∞—Å
        this.PRICE_CACHE_TTL = 30; // 30 —Å–µ–∫—É–Ω–¥
        this.BATCH_SIZE = 10;
        
        // –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
        this.tokenQueue = new Set();
        this.processingTokens = false;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.stats = {
            cacheHits: 0,
            apiCalls: 0,
            errors: 0
        };
        
        console.log('‚ö° Fast Token Service initialized');
    }

    // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
    async getTokenMetadata(mint) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        if (this.tokenCache.has(mint)) {
            this.stats.cacheHits++;
            return this.tokenCache.get(mint);
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫–µ—à
            const cached = await this.redis.get(`token:${mint}`);
            if (cached) {
                const tokenData = JSON.parse(cached);
                this.tokenCache.set(mint, tokenData);
                this.stats.cacheHits++;
                return tokenData;
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è Redis error for token ${mint}:`, error.message);
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        this.tokenQueue.add(mint);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        if (!this.processingTokens) {
            setImmediate(() => this.processTokenQueue());
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        const fallback = {
            address: mint,
            symbol: mint.slice(0, 4).toUpperCase(),
            name: 'Unknown Token',
            logoURI: null,
            decimals: 6
        };
        
        // –ö–µ—à–∏—Ä—É–µ–º fallback –≤—Ä–µ–º–µ–Ω–Ω–æ
        this.tokenCache.set(mint, fallback);
        
        return fallback;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–æ–Ω–µ
    async processTokenQueue() {
        if (this.processingTokens || this.tokenQueue.size === 0) return;
        
        this.processingTokens = true;
        
        try {
            // –ë–µ—Ä–µ–º –±–∞—Ç—á —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            const batch = Array.from(this.tokenQueue).slice(0, this.BATCH_SIZE);
            batch.forEach(mint => this.tokenQueue.delete(mint));
            
            console.log(`üîÑ Processing token batch: ${batch.length} tokens`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await Promise.allSettled(batch.map(mint => this.fetchTokenMetadata(mint)));
            
        } catch (error) {
            console.error('‚ùå Error processing token queue:', error.message);
        }
        
        this.processingTokens = false;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ç–æ–∫–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if (this.tokenQueue.size > 0) {
            setTimeout(() => this.processTokenQueue(), 100);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Helius API
    async fetchTokenMetadata(mint) {
        try {
            const HELIUS_API_KEY = process.env.HELIUS_API_KEY;
            if (!HELIUS_API_KEY) {
                console.warn('‚ö†Ô∏è HELIUS_API_KEY not set');
                return;
            }
            
            this.stats.apiCalls++;
            
            const response = await axios.post(
                `https://api.helius.xyz/v0/token-metadata?api-key=${HELIUS_API_KEY}`,
                { mintAccounts: [mint] },
                { 
                    timeout: 3000,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            if (response.data && response.data.length > 0) {
                const meta = response.data[0];
                
                let logoURI = null;
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –∏–∑ URI
                const metadataUri = meta?.onChainMetadata?.metadata?.data?.uri;
                if (metadataUri) {
                    try {
                        const uriResponse = await axios.get(metadataUri, {
                            timeout: 2000,
                            responseType: 'json',
                            headers: {
                                'Accept': 'application/json',
                                'User-Agent': 'Mozilla/5.0'
                            }
                        });
                        
                        if (uriResponse.data && uriResponse.data.image) {
                            logoURI = this.normalizeImageUrl(uriResponse.data.image);
                        }
                    } catch (uriError) {
                        console.warn(`‚ö†Ô∏è Failed to fetch logo for ${mint}:`, uriError.message);
                    }
                }
                
                const tokenData = {
                    address: mint,
                    symbol: meta.onChainMetadata?.metadata?.data?.symbol || 'Unknown',
                    name: meta.onChainMetadata?.metadata?.data?.name || 'Unknown Token',
                    decimals: meta.onChainAccountInfo?.accountInfo?.data?.parsed?.info?.decimals || 6,
                    logoURI: logoURI
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à–∏
                this.tokenCache.set(mint, tokenData);
                await this.redis.setex(`token:${mint}`, this.TOKEN_CACHE_TTL, JSON.stringify(tokenData));
                
                console.log(`‚úÖ Fetched metadata for ${tokenData.symbol} (${mint.slice(0, 8)}...)`);
                
                return tokenData;
            } else {
                console.warn(`‚ö†Ô∏è No metadata found for ${mint}`);
            }
        } catch (error) {
            this.stats.errors++;
            console.error(`‚ùå Error fetching metadata for ${mint}:`, error.message);
        }
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    normalizeImageUrl(imageUrl) {
        if (!imageUrl) return null;
        
        if (imageUrl.startsWith('ipfs://')) {
            return imageUrl.replace('ipfs://', 'https://ipfs.io/ipfs/');
        }
        
        return imageUrl;
    }

    // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã SOL
    async getSolPrice() {
        const cacheKey = 'solprice:current';
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        if (this.priceCache.has(cacheKey)) {
            const cached = this.priceCache.get(cacheKey);
            if (now - cached.timestamp < this.PRICE_CACHE_TTL * 1000) {
                return cached.price;
            }
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫–µ—à
            const cached = await this.redis.get(cacheKey);
            if (cached) {
                const price = parseFloat(cached);
                this.priceCache.set(cacheKey, { price, timestamp: now });
                return price;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Redis error getting SOL price:', error.message);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
        setImmediate(() => this.updateSolPriceBackground());
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ fallback
        const lastPrice = this.priceCache.get(cacheKey);
        return lastPrice ? lastPrice.price : 180; // fallback price
    }

    // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã SOL
    async updateSolPriceBackground() {
        try {
            console.log('üí∞ Updating SOL price...');
            
            const response = await axios.get(
                'https://api.binance.com/api/v3/ticker/price?symbol=SOLUSDT',
                { timeout: 2000 }
            );
            
            if (response.data && response.data.price) {
                const price = parseFloat(response.data.price);
                const now = Date.now();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                this.priceCache.set('solprice:current', { price, timestamp: now });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º Redis –∫–µ—à
                await this.redis.setex('solprice:current', this.PRICE_CACHE_TTL * 2, price.toString());
                
                console.log(`‚úÖ Updated SOL price: ${price}`);
                return price;
            }
        } catch (error) {
            console.error('‚ùå Error updating SOL price:', error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã SOL (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    async getHistoricalSolPrice(timestamp) {
        // –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const now = Date.now();
        const txTime = new Date(timestamp).getTime();
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        if (now - txTime < 3600000) {
            return await this.getSolPrice();
        }
        
        // –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        const dateKey = new Date(timestamp).toISOString().slice(0, 13); // YYYY-MM-DDTHH
        const cacheKey = `solprice:${dateKey}`;
        
        try {
            const cached = await this.redis.get(cacheKey);
            if (cached) {
                return parseFloat(cached);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Redis error for historical price:', error.message);
        }
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        const currentPrice = await this.getSolPrice();
        
        // –ö–µ—à–∏—Ä—É–µ–º –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É
        try {
            await this.redis.setex(cacheKey, 86400, currentPrice.toString());
        } catch (error) {
            console.warn('‚ö†Ô∏è Error caching historical price:', error.message);
        }
        
        return currentPrice;
    }

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    async preloadPopularTokens() {
        const popularMints = [
            'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', // USDC
            'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB', // USDT  
            'DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263', // BONK
            'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So',  // mSOL
            'JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN',  // JUP
        ];
        
        console.log('üîÑ Preloading popular tokens...');
        
        for (const mint of popularMints) {
            this.tokenQueue.add(mint);
        }
        
        if (!this.processingTokens) {
            setImmediate(() => this.processTokenQueue());
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π
    async clearCaches() {
        this.tokenCache.clear();
        this.priceCache.clear();
        
        try {
            const keys = await this.redis.keys('token:*');
            if (keys.length > 0) {
                await this.redis.del(...keys);
            }
            
            await this.redis.del('solprice:current');
            
            console.log('‚úÖ Token service caches cleared');
        } catch (error) {
            console.error('‚ùå Error clearing caches:', error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            ...this.stats,
            localTokenCache: this.tokenCache.size,
            localPriceCache: this.priceCache.size,
            queueSize: this.tokenQueue.size,
            processing: this.processingTokens
        };
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    async close() {
        console.log('‚èπÔ∏è Closing Fast Token Service...');
        
        this.tokenQueue.clear();
        this.tokenCache.clear();
        this.priceCache.clear();
        
        await this.redis.quit();
        
        console.log('‚úÖ Fast Token Service closed');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const fastTokenService = new FastTokenService();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
setTimeout(() => {
    fastTokenService.preloadPopularTokens();
    fastTokenService.updateSolPriceBackground();
}, 1000);

module.exports = {
    fastTokenService,
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async fetchTokenMetadata(mint) {
        return await fastTokenService.getTokenMetadata(mint);
    },
    
    async fetchHistoricalSolPrice(timestamp) {
        return await fastTokenService.getHistoricalSolPrice(timestamp);
    },
    
    async getSolPrice() {
        return await fastTokenService.getSolPrice();
    },
    
    normalizeImageUrl(imageUrl) {
        return fastTokenService.normalizeImageUrl(imageUrl);
    },
    
    // Redis instance –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    redis: fastTokenService.redis
};