// server/src/services/enhancedPriceService.js - –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ü–µ–Ω

const Redis = require('ioredis');
const SolanaPoolService = require('./solanaPoolService');

class EnhancedPriceService {
    constructor() {
        this.redis = new Redis(process.env.REDIS_URL || 'redis://default:sDFxdVgjQtqENxXvirslAnoaAYhsJLJF@tramway.proxy.rlwy.net:37791');
        this.poolService = new SolanaPoolService();
        
        // –ö—ç—à –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
        this.solPriceCache = {
            price: 150,
            lastUpdated: 0,
            cacheTimeout: 30000
        };
        this.tokenPriceCache = new Map();
        this.maxCacheSize = 1000;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.strategies = {
            // –î–ª—è SOL - —Å–Ω–∞—á–∞–ª–∞ –ø—É–ª—ã, –ø–æ—Ç–æ–º –≤–Ω–µ—à–Ω–∏–µ API
            SOL: ['pools', 'dexscreener', 'fallback'],
            // –î–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ - —Å–Ω–∞—á–∞–ª–∞ –ø—É–ª—ã
            POPULAR: ['pools', 'dexscreener'],
            // –î–ª—è —Ä–µ–¥–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ - –≤–Ω–µ—à–Ω–∏–µ API, –ø–æ—Ç–æ–º –ø—É–ª—ã
            RARE: ['dexscreener', 'pools']
        };
        
        // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–∏–º–µ—é—Ç —Ö–æ—Ä–æ—à–∏–µ –ø—É–ª—ã)
        this.popularTokens = new Set([
            'So11111111111111111111111111111111111111112', // SOL
            'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', // USDC
            'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB', // USDT
            'DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263', // BONK
            'EKpQGSJtjMFqKZ9KQanSqYXRcF8fBopzLHYxdM65zcjm', // WIF
            // –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        ]);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.stats = {
            poolRequests: 0,
            apiRequests: 0,
            poolSuccess: 0,
            apiSuccess: 0,
            poolErrors: 0,
            apiErrors: 0,
            avgPoolTime: 0,
            avgApiTime: 0
        };
        
        console.log(`[${new Date().toISOString()}] üöÄ EnhancedPriceService initialized`);
        this.startBackgroundUpdates();
    }

    // –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    startBackgroundUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º SOL —Ü–µ–Ω—É –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—É–ª–∞–º)
        setInterval(async () => {
            try {
                await this.updateSolPriceHybrid();
            } catch (error) {
                console.error(`[${new Date().toISOString()}] ‚ùå Background SOL price update failed:`, error.message);
            }
        }, 15000);

        // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
        setInterval(() => {
            this.cleanTokenPriceCache();
        }, 180000);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.updatePopularTokensList();
        }, 1800000);
    }

    // –ì–∏–±—Ä–∏–¥–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã SOL
    async updateSolPriceHybrid() {
        const now = Date.now();
        
        if (now - this.solPriceCache.lastUpdated < this.solPriceCache.cacheTimeout) {
            return this.solPriceCache.price;
        }

        let finalPrice = this.solPriceCache.price;
        let source = 'fallback';

        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è SOL: pools -> dexscreener -> fallback
        for (const strategy of this.strategies.SOL) {
            try {
                const startTime = Date.now();
                
                if (strategy === 'pools') {
                    const poolResult = await this.poolService.getSolPrice();
                    if (poolResult && poolResult.success && poolResult.price > 50) { // –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                        finalPrice = poolResult.price;
                        source = 'pools';
                        this.stats.poolSuccess++;
                        this.stats.avgPoolTime = (this.stats.avgPoolTime + (Date.now() - startTime)) / 2;
                        break;
                    }
                } else if (strategy === 'dexscreener') {
                    const apiPrice = await this.getSolPriceFromAPI();
                    if (apiPrice > 50) {
                        finalPrice = apiPrice;
                        source = 'dexscreener';
                        this.stats.apiSuccess++;
                        this.stats.avgApiTime = (this.stats.avgApiTime + (Date.now() - startTime)) / 2;
                        break;
                    }
                }
            } catch (error) {
                console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è SOL price strategy ${strategy} failed:`, error.message);
                if (strategy === 'pools') {
                    this.stats.poolErrors++;
                } else {
                    this.stats.apiErrors++;
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        this.solPriceCache = {
            price: finalPrice,
            lastUpdated: now,
            cacheTimeout: 30000,
            source
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        await this.redis.setex('sol_price_hybrid', 60, JSON.stringify(this.solPriceCache));
        
        console.log(`[${new Date().toISOString()}] ‚úÖ Updated SOL price (${source}): ${finalPrice.toFixed(4)}`);
        return finalPrice;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã SOL –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
    async getSolPriceFromAPI() {
        try {
            const response = await fetch('https://api.dexscreener.com/latest/dex/tokens/So11111111111111111111111111111111111111112', {
                timeout: 5000,
                headers: { 'Accept': 'application/json' }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.pairs && data.pairs.length > 0) {
                const bestPair = data.pairs.reduce((prev, current) =>
                    (current.volume?.h24 || 0) > (prev.volume?.h24 || 0) ? current : prev
                );
                return parseFloat(bestPair.priceUsd || 150);
            }
            
            throw new Error('No price data found');
        } catch (error) {
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã SOL (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
    async getSolPrice() {
        const price = await this.updateSolPriceHybrid();
        return {
            success: true,
            price: price,
            source: this.solPriceCache.source || 'hybrid',
            lastUpdated: this.solPriceCache.lastUpdated
        };
    }

    // –ì–∏–±—Ä–∏–¥–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤
    async getTokenPrices(tokenMints) {
        if (!tokenMints || tokenMints.length === 0) {
            return new Map();
        }

        const results = new Map();
        const uncachedMints = [];
        const now = Date.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        for (const mint of tokenMints) {
            const cached = this.tokenPriceCache.get(mint);
            if (cached && (now - cached.timestamp) < 90000) { // 1.5 –º–∏–Ω—É—Ç—ã –∫—ç—à
                results.set(mint, cached.data);
            } else {
                uncachedMints.push(mint);
            }
        }

        if (uncachedMints.length === 0) {
            return results;
        }

        console.log(`[${new Date().toISOString()}] üí± Getting prices for ${uncachedMints.length} tokens using hybrid approach`);

        // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ —Ä–µ–¥–∫–∏–µ
        const popularMints = [];
        const rareMints = [];
        
        uncachedMints.forEach(mint => {
            if (this.popularTokens.has(mint)) {
                popularMints.push(mint);
            } else {
                rareMints.push(mint);
            }
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—É–ª–∞–º)
        if (popularMints.length > 0) {
            await this.processTokensWithStrategy(popularMints, this.strategies.POPULAR, results);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∫–∏–µ —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–Ω–µ—à–Ω–∏–º API)
        if (rareMints.length > 0) {
            await this.processTokensWithStrategy(rareMints, this.strategies.RARE, results);
        }

        return results;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    async processTokensWithStrategy(tokenMints, strategies, results) {
        const BATCH_SIZE = 8;
        
        for (let i = 0; i < tokenMints.length; i += BATCH_SIZE) {
            const batch = tokenMints.slice(i, i + BATCH_SIZE);
            
            const batchPromises = batch.map(async (mint) => {
                let finalPrice = null;
                let source = 'none';

                // –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
                for (const strategy of strategies) {
                    try {
                        const startTime = Date.now();
                        
                        if (strategy === 'pools') {
                            this.stats.poolRequests++;
                            const poolPrice = await this.poolService.getTokenPriceFromPools(mint);
                            
                            if (poolPrice && poolPrice.price > 0) {
                                finalPrice = poolPrice;
                                source = 'pools';
                                this.stats.poolSuccess++;
                                this.stats.avgPoolTime = (this.stats.avgPoolTime + (Date.now() - startTime)) / 2;
                                break;
                            }
                        } else if (strategy === 'dexscreener') {
                            this.stats.apiRequests++;
                            const apiPrice = await this.getTokenPriceFromAPI(mint);
                            
                            if (apiPrice && apiPrice.price > 0) {
                                finalPrice = apiPrice;
                                source = 'dexscreener';
                                this.stats.apiSuccess++;
                                this.stats.avgApiTime = (this.stats.avgApiTime + (Date.now() - startTime)) / 2;
                                break;
                            }
                        }
                    } catch (error) {
                        console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Strategy ${strategy} failed for ${mint.slice(0,8)}...:`, error.message);
                        if (strategy === 'pools') {
                            this.stats.poolErrors++;
                        } else {
                            this.stats.apiErrors++;
                        }
                    }
                }

                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (finalPrice) {
                    finalPrice.source = source;
                    this.tokenPriceCache.set(mint, {
                        data: finalPrice,
                        timestamp: Date.now()
                    });
                    
                    console.log(`[${new Date().toISOString()}] ‚úÖ Got price for ${mint.slice(0,8)}... (${source}): ${finalPrice.price.toFixed(8)}`);
                }

                return { mint, price: finalPrice };
            });

            const batchResults = await Promise.all(batchPromises);
            batchResults.forEach(({ mint, price }) => {
                results.set(mint, price);
            });

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if (i + BATCH_SIZE < tokenMints.length) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
    async getTokenPriceFromAPI(mint) {
        try {
            const response = await fetch(`https://api.dexscreener.com/latest/dex/tokens/${mint}`, {
                timeout: 5000,
                headers: { 'Accept': 'application/json' }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            
            let priceData = null;
            if (data.pairs && data.pairs.length > 0) {
                const bestPair = data.pairs.reduce((prev, current) =>
                    (current.volume?.h24 || 0) > (prev.volume?.h24 || 0) ? current : prev
                );
                priceData = {
                    price: parseFloat(bestPair.priceUsd || 0),
                    change24h: parseFloat(bestPair.priceChange?.h24 || 0),
                    volume24h: parseFloat(bestPair.volume?.h24 || 0),
                    liquidity: parseFloat(bestPair.liquidity?.usd || 0)
                };
            }

            return priceData;
        } catch (error) {
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    async updatePopularTokensList() {
        try {
            console.log(`[${new Date().toISOString()}] üìä Updating popular tokens list...`);
            
            // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É
            
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã —á–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è
            // –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Ö –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
            
            const requestCounts = new Map();
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫—ç—à–∞
            for (const [mint, cached] of this.tokenPriceCache.entries()) {
                if (cached.requestCount) {
                    requestCounts.set(mint, cached.requestCount);
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
            const sortedByRequests = [...requestCounts.entries()]
                .sort((a, b) => b[1] - a[1])
                .slice(0, 20); // –¢–æ–ø-20
            
            let newPopularAdded = 0;
            sortedByRequests.forEach(([mint, count]) => {
                if (!this.popularTokens.has(mint) && count > 10) {
                    this.popularTokens.add(mint);
                    newPopularAdded++;
                }
            });
            
            if (newPopularAdded > 0) {
                console.log(`[${new Date().toISOString()}] üìà Added ${newPopularAdded} new popular tokens`);
            }
            
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error updating popular tokens:`, error.message);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç–æ–∫–µ–Ω–æ–≤
    cleanTokenPriceCache() {
        if (this.tokenPriceCache.size <= this.maxCacheSize) return;

        const now = Date.now();
        const entries = Array.from(this.tokenPriceCache.entries());
        
        // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        const validEntries = entries.filter(([, value]) => 
            (now - value.timestamp) < 300000 // 5 –º–∏–Ω—É—Ç
        );

        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ
        if (validEntries.length > this.maxCacheSize) {
            validEntries.sort((a, b) => b[1].timestamp - a[1].timestamp);
            validEntries.length = this.maxCacheSize;
        }

        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à
        this.tokenPriceCache.clear();
        validEntries.forEach(([key, value]) => {
            this.tokenPriceCache.set(key, value);
        });

        console.log(`[${new Date().toISOString()}] üßπ Cleaned token price cache: ${validEntries.length} entries remaining`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    getStats() {
        const poolStats = this.poolService.getStats();
        
        return {
            hybrid: {
                solPrice: {
                    current: this.solPriceCache.price,
                    lastUpdated: this.solPriceCache.lastUpdated,
                    source: this.solPriceCache.source,
                    age: Date.now() - this.solPriceCache.lastUpdated
                },
                tokenCache: {
                    size: this.tokenPriceCache.size,
                    maxSize: this.maxCacheSize,
                    utilization: Math.round((this.tokenPriceCache.size / this.maxCacheSize) * 100)
                },
                strategies: this.strategies,
                popularTokens: this.popularTokens.size
            },
            performance: {
                pools: {
                    requests: this.stats.poolRequests,
                    success: this.stats.poolSuccess,
                    errors: this.stats.poolErrors,
                    successRate: this.stats.poolRequests > 0 ? 
                        `${((this.stats.poolSuccess / this.stats.poolRequests) * 100).toFixed(1)}%` : '0%',
                    avgTime: `${this.stats.avgPoolTime.toFixed(0)}ms`
                },
                api: {
                    requests: this.stats.apiRequests,
                    success: this.stats.apiSuccess,
                    errors: this.stats.apiErrors,
                    successRate: this.stats.apiRequests > 0 ? 
                        `${((this.stats.apiSuccess / this.stats.apiRequests) * 100).toFixed(1)}%` : '0%',
                    avgTime: `${this.stats.avgApiTime.toFixed(0)}ms`
                }
            },
            pools: poolStats
        };
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
    async forceUpdateTokenPrice(mint) {
        this.tokenPriceCache.delete(mint);
        const result = new Map();
        await this.processTokensWithStrategy([mint], this.strategies.POPULAR, result);
        return result.get(mint);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–æ–±—É–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
    async getBestTokenPrice(mint) {
        const results = [];
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—É–ª–æ–≤
        try {
            const poolPrice = await this.poolService.getTokenPriceFromPools(mint);
            if (poolPrice && poolPrice.price > 0) {
                results.push({ ...poolPrice, source: 'pools' });
            }
        } catch (error) {
            console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Pool price failed:`, error.message);
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
        try {
            const apiPrice = await this.getTokenPriceFromAPI(mint);
            if (apiPrice && apiPrice.price > 0) {
                results.push({ ...apiPrice, source: 'dexscreener' });
            }
        } catch (error) {
            console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è API price failed:`, error.message);
        }
        
        if (results.length === 0) {
            return null;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–±—ä–µ–º—É)
        const best = results.reduce((prev, current) => {
            const prevScore = (prev.liquidity || 0) + (prev.volume24h || 0);
            const currentScore = (current.liquidity || 0) + (current.volume24h || 0);
            return currentScore > prevScore ? current : prev;
        });
        
        return {
            ...best,
            alternatives: results.length > 1 ? results.filter(r => r !== best) : []
        };
    }

    async close() {
        await this.poolService.close();
        await this.redis.quit();
        console.log(`[${new Date().toISOString()}] ‚úÖ EnhancedPriceService closed`);
    }
}

module.exports = EnhancedPriceService;