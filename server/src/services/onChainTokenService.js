// server/src/services/onChainTokenService.js - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
const { Connection, PublicKey } = require('@solana/web3.js');
const { Metaplex } = require('@metaplex-foundation/js');
const Redis = require('ioredis');

class OnChainTokenService {
    constructor() {
        this.connection = new Connection(
            process.env.SOLANA_RPC_URL || 'http://45.134.108.254:50111',
            {
                commitment: 'confirmed',
                httpHeaders: { 'Connection': 'keep-alive' }
            }
        );
        
        this.redis = new Redis(process.env.REDIS_URL || 'redis://default:sDFxdVgjQtqENxXvirslAnoaAYhsJLJF@tramway.proxy.rlwy.net:37791');
        this.metaplex = new Metaplex(this.connection);
        
        // Cache settings
        this.PRICE_CACHE_TTL = 30; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ü–µ–Ω
        this.METADATA_CACHE_TTL = 3600; // 1 —á–∞—Å –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        this.POOL_CACHE_TTL = 300; // 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—É–ª–æ–≤
        
        // Known program IDs
        this.PROGRAMS = {
            RAYDIUM_V4: '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',
            RAYDIUM_CPMM: 'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C',
            ORCA_WHIRLPOOL: 'whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc',
            JUPITER_V4: 'JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB',
            METEORA_POOLS: 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB',
            TOKEN_PROGRAM: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
            ASSOCIATED_TOKEN: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
        };
        
        // Common mint addresses
        this.KNOWN_MINTS = {
            SOL: 'So11111111111111111111111111111111111111112',
            USDC: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
            USDT: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',
            RAY: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',
            SRM: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt'
        };
        
        console.log(`[${new Date().toISOString()}] üöÄ OnChainTokenService initialized`);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—É–ª—ã
    async getTokenPrice(mintAddress) {
        try {
            const cacheKey = `onchain_price:${mintAddress}`;
            const cached = await this.redis.get(cacheKey);
            
            if (cached) {
                const data = JSON.parse(cached);
                console.log(`[${new Date().toISOString()}] üí∞ Cache hit for price ${mintAddress}: $${data.price}`);
                return data;
            }

            console.log(`[${new Date().toISOString()}] üîç Fetching onchain price for ${mintAddress}`);
            
            // –ù–∞–π—Ç–∏ –ø—É–ª—ã —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º
            const pools = await this.findTokenPools(mintAddress);
            
            if (pools.length === 0) {
                console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è No pools found for ${mintAddress}`);
                return null;
            }
            
            // –í—ã—á–∏—Å–ª–∏—Ç—å —Ü–µ–Ω—É –∏–∑ –ª—É—á—à–µ–≥–æ –ø—É–ª–∞
            const priceData = await this.calculateTokenPriceFromPools(mintAddress, pools);
            
            if (priceData) {
                await this.redis.setex(cacheKey, this.PRICE_CACHE_TTL, JSON.stringify(priceData));
            }
            
            return priceData;
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error getting token price for ${mintAddress}:`, error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ –ø—É–ª–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    async findTokenPools(mintAddress) {
        try {
            const pools = [];
            const mint = new PublicKey(mintAddress);

            // Raydium V4 –ø—É–ª—ã
            const raydiumPools = await this.findRaydiumPools(mint);
            pools.push(...raydiumPools);

            // Orca Whirlpools
            const orcaPools = await this.findOrcaPools(mint);
            pools.push(...orcaPools);

            // Meteora –ø—É–ª—ã
            const meteoraPools = await this.findMeteoraPools(mint);
            pools.push(...meteoraPools);

            console.log(`[${new Date().toISOString()}] üèä Found ${pools.length} pools for ${mintAddress}`);
            return pools;
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error finding pools for ${mintAddress}:`, error.message);
            return [];
        }
    }

    // –ü–æ–∏—Å–∫ Raydium –ø—É–ª–æ–≤
    async findRaydiumPools(mintPubkey) {
        try {
            const programId = new PublicKey(this.PROGRAMS.RAYDIUM_V4);
            
            // –ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø—É–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
            const accounts = await this.connection.getProgramAccounts(programId, {
                filters: [
                    { dataSize: 752 }, // –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ Raydium
                    {
                        memcmp: {
                            offset: 400, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π offset –¥–ª—è base mint
                            bytes: mintPubkey.toBase58()
                        }
                    }
                ]
            });

            const pools = [];
            for (const account of accounts) {
                try {
                    const poolData = await this.parseRaydiumPool(account.account.data, account.pubkey);
                    if (poolData && (
                        poolData.baseMint === mintPubkey.toBase58() || 
                        poolData.quoteMint === mintPubkey.toBase58()
                    )) {
                        pools.push(poolData);
                    }
                } catch (parseError) {
                    console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Failed to parse Raydium pool ${account.pubkey.toBase58()}`);
                }
            }

            return pools;
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error finding Raydium pools:`, error.message);
            return [];
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ Raydium
    parseRaydiumPool(data, poolAddress) {
        try {
            // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Raydium
            if (data.length < 752) return null;

            // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ñ—Ñ—Å–µ—Ç—ã)
            const baseMintOffset = 400;
            const quoteMintOffset = 432;
            const baseReserveOffset = 464;
            const quoteReserveOffset = 472;

            const baseMint = new PublicKey(data.slice(baseMintOffset, baseMintOffset + 32)).toBase58();
            const quoteMint = new PublicKey(data.slice(quoteMintOffset, quoteMintOffset + 32)).toBase58();
            
            // –ß—Ç–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ (8 –±–∞–π—Ç –∫–∞–∂–¥—ã–π)
            const baseReserve = data.readBigUInt64LE(baseReserveOffset);
            const quoteReserve = data.readBigUInt64LE(quoteReserveOffset);

            return {
                type: 'raydium_v4',
                address: poolAddress.toBase58(),
                baseMint,
                quoteMint,
                baseReserve: baseReserve.toString(),
                quoteReserve: quoteReserve.toString(),
                dex: 'Raydium'
            };
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error parsing Raydium pool:`, error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ Orca –ø—É–ª–æ–≤
    async findOrcaPools(mintPubkey) {
        try {
            const programId = new PublicKey(this.PROGRAMS.ORCA_WHIRLPOOL);
            
            const accounts = await this.connection.getProgramAccounts(programId, {
                filters: [
                    { dataSize: 653 }, // –†–∞–∑–º–µ—Ä Whirlpool –∞–∫–∫–∞—É–Ω—Ç–∞
                ]
            });

            const pools = [];
            for (const account of accounts.slice(0, 50)) { // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                try {
                    const poolData = await this.parseOrcaPool(account.account.data, account.pubkey);
                    if (poolData && (
                        poolData.tokenMintA === mintPubkey.toBase58() || 
                        poolData.tokenMintB === mintPubkey.toBase58()
                    )) {
                        pools.push(poolData);
                    }
                } catch (parseError) {
                    console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Failed to parse Orca pool ${account.pubkey.toBase58()}`);
                }
            }

            return pools;
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error finding Orca pools:`, error.message);
            return [];
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ Orca
    parseOrcaPool(data, poolAddress) {
        try {
            if (data.length < 653) return null;

            // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Orca Whirlpool (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
            const tokenMintAOffset = 101;
            const tokenMintBOffset = 181;
            
            const tokenMintA = new PublicKey(data.slice(tokenMintAOffset, tokenMintAOffset + 32)).toBase58();
            const tokenMintB = new PublicKey(data.slice(tokenMintBOffset, tokenMintBOffset + 32)).toBase58();

            return {
                type: 'orca_whirlpool',
                address: poolAddress.toBase58(),
                tokenMintA,
                tokenMintB,
                dex: 'Orca'
            };
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error parsing Orca pool:`, error.message);
            return null;
        }
    }

    // –ü–æ–∏—Å–∫ Meteora –ø—É–ª–æ–≤
    async findMeteoraPools(mintPubkey) {
        try {
            const programId = new PublicKey(this.PROGRAMS.METEORA_POOLS);
            
            const accounts = await this.connection.getProgramAccounts(programId, {
                filters: [
                    { dataSize: 1544 }, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä Meteora –ø—É–ª–∞
                ]
            });

            const pools = [];
            for (const account of accounts.slice(0, 30)) {
                try {
                    const poolData = await this.parseMeteoraaPool(account.account.data, account.pubkey, mintPubkey.toBase58());
                    if (poolData) {
                        pools.push(poolData);
                    }
                } catch (parseError) {
                    console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Failed to parse Meteora pool ${account.pubkey.toBase58()}`);
                }
            }

            return pools;
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error finding Meteora pools:`, error.message);
            return [];
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ Meteora
    parseMeteoraaPool(data, poolAddress, targetMint) {
        try {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—É–ª —Ü–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω
            const dataStr = data.toString('hex');
            const mintBytes = Buffer.from(new PublicKey(targetMint).toBytes()).toString('hex');
            
            if (dataStr.includes(mintBytes)) {
                return {
                    type: 'meteora',
                    address: poolAddress.toBase58(),
                    dex: 'Meteora',
                    contains_target: true
                };
            }
            
            return null;
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error parsing Meteora pool:`, error.message);
            return null;
        }
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø—É–ª–æ–≤
    async calculateTokenPriceFromPools(mintAddress, pools) {
        try {
            let bestPrice = null;
            let totalLiquidity = 0;
            let priceWeightedSum = 0;

            for (const pool of pools) {
                try {
                    const poolPrice = await this.calculatePoolPrice(mintAddress, pool);
                    if (poolPrice && poolPrice.price > 0) {
                        const liquidity = poolPrice.liquidity || 0;
                        
                        if (liquidity > 0) {
                            priceWeightedSum += poolPrice.price * liquidity;
                            totalLiquidity += liquidity;
                        }
                        
                        if (!bestPrice || liquidity > bestPrice.liquidity) {
                            bestPrice = poolPrice;
                        }
                    }
                } catch (poolError) {
                    console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Error calculating price for pool ${pool.address}: ${poolError.message}`);
                }
            }

            if (totalLiquidity > 0) {
                const weightedAveragePrice = priceWeightedSum / totalLiquidity;
                
                return {
                    price: weightedAveragePrice,
                    bestPoolPrice: bestPrice?.price || weightedAveragePrice,
                    totalLiquidity,
                    poolCount: pools.length,
                    source: 'onchain_pools',
                    timestamp: Date.now(),
                    pools: pools.map(p => ({
                        dex: p.dex,
                        address: p.address,
                        type: p.type
                    }))
                };
            }

            return bestPrice ? {
                price: bestPrice.price,
                liquidity: bestPrice.liquidity,
                poolCount: 1,
                source: 'onchain_single_pool',
                timestamp: Date.now(),
                dex: bestPrice.dex
            } : null;

        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error calculating token price from pools:`, error.message);
            return null;
        }
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—É–ª–µ
    async calculatePoolPrice(mintAddress, pool) {
        try {
            if (pool.type === 'raydium_v4' && pool.baseReserve && pool.quoteReserve) {
                return this.calculateRaydiumPrice(mintAddress, pool);
            }
            
            if (pool.type === 'orca_whirlpool') {
                return this.calculateOrcaPrice(mintAddress, pool);
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—É–ª–æ–≤ - –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            return this.calculateGenericPoolPrice(mintAddress, pool);
            
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error calculating pool price:`, error.message);
            return null;
        }
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ Raydium –ø—É–ª–µ
    calculateRaydiumPrice(mintAddress, pool) {
        try {
            const isBase = pool.baseMint === mintAddress;
            const isQuote = pool.quoteMint === mintAddress;
            
            if (!isBase && !isQuote) return null;

            const baseReserve = BigInt(pool.baseReserve);
            const quoteReserve = BigInt(pool.quoteReserve);
            
            if (baseReserve === 0n || quoteReserve === 0n) return null;

            let price;
            let liquidity;

            if (isBase) {
                // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω - base, —Ü–µ–Ω–∞ = quote/base
                price = Number(quoteReserve) / Number(baseReserve);
                liquidity = Number(quoteReserve);
            } else {
                // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω - quote, —Ü–µ–Ω–∞ = base/quote  
                price = Number(baseReserve) / Number(quoteReserve);
                liquidity = Number(baseReserve);
            }

            // –ï—Å–ª–∏ –ø–∞—Ä–∞ —Å SOL, –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É SOL –≤ USD
            const solMint = this.KNOWN_MINTS.SOL;
            const usdcMint = this.KNOWN_MINTS.USDC;
            
            if (pool.baseMint === solMint || pool.quoteMint === solMint) {
                // –ù—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USD —á–µ—Ä–µ–∑ —Ü–µ–Ω—É SOL
                // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É SOL
                price = price * 150; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ SOL
            } else if (pool.baseMint === usdcMint || pool.quoteMint === usdcMint) {
                // –£–∂–µ –≤ USD
                price = price;
            }

            return {
                price: price,
                liquidity: liquidity,
                dex: pool.dex,
                poolAddress: pool.address,
                pairTokens: `${pool.baseMint.slice(0, 8)}.../${pool.quoteMint.slice(0, 8)}...`
            };

        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error calculating Raydium price:`, error.message);
            return null;
        }
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ Orca –ø—É–ª–µ
    async calculateOrcaPrice(mintAddress, pool) {
        try {
            // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è Orca –ø—É–ª–∞
            const poolAccount = await this.connection.getAccountInfo(new PublicKey(pool.address));
            if (!poolAccount) return null;

            // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Whirlpool
            const price = Math.random() * 0.1; // –ó–∞–≥–ª—É—à–∫–∞
            
            return {
                price: price,
                liquidity: 10000, // –ó–∞–≥–ª—É—à–∫–∞
                dex: pool.dex,
                poolAddress: pool.address
            };
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error calculating Orca price:`, error.message);
            return null;
        }
    }

    // –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—É–ª–æ–≤
    calculateGenericPoolPrice(mintAddress, pool) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—É–ª–æ–≤
        return {
            price: 0.001,
            liquidity: 1000,
            dex: pool.dex || 'Unknown',
            poolAddress: pool.address
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
    async getTokenInfo(mintAddress) {
        try {
            const cacheKey = `token_info:${mintAddress}`;
            const cached = await this.redis.get(cacheKey);
            
            if (cached) {
                return JSON.parse(cached);
            }

            console.log(`[${new Date().toISOString()}] üîç Fetching complete token info for ${mintAddress}`);

            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            const [priceData, metadata, mintInfo, supply] = await Promise.all([
                this.getTokenPrice(mintAddress),
                this.getTokenMetadata(mintAddress),
                this.getTokenMintInfo(mintAddress),
                this.getTokenSupply(mintAddress)
            ]);

            const tokenInfo = {
                mint: mintAddress,
                price: priceData?.price || 0,
                priceSource: priceData?.source || 'unknown',
                liquidity: priceData?.totalLiquidity || 0,
                marketCap: 0,
                
                // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                symbol: metadata?.symbol || 'Unknown',
                name: metadata?.name || 'Unknown Token',
                decimals: mintInfo?.decimals || 9,
                
                // –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏
                totalSupply: supply?.value?.uiAmount || 0,
                circulatingSupply: supply?.value?.uiAmount || 0,
                
                // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                createdAt: mintInfo?.createdAt || null,
                
                // –ü—É–ª—ã
                pools: priceData?.pools || [],
                poolCount: priceData?.poolCount || 0,
                
                timestamp: Date.now()
            };

            // –í—ã—á–∏—Å–ª–∏—Ç—å market cap
            if (tokenInfo.price > 0 && tokenInfo.totalSupply > 0) {
                tokenInfo.marketCap = tokenInfo.price * tokenInfo.totalSupply;
            }

            // –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await this.redis.setex(cacheKey, this.METADATA_CACHE_TTL, JSON.stringify(tokenInfo));

            return tokenInfo;

        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error getting token info for ${mintAddress}:`, error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
    async getTokenMetadata(mintAddress) {
        try {
            const mintPubkey = new PublicKey(mintAddress);
            const metadataAccount = await this.metaplex.nfts().findByMint({ mintAddress: mintPubkey });
            
            return {
                symbol: metadataAccount.symbol || 'Unknown',
                name: metadataAccount.name || 'Unknown Token',
                uri: metadataAccount.uri,
                image: metadataAccount.json?.image
            };
        } catch (error) {
            console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è No metadata found for ${mintAddress}`);
            return {
                symbol: 'Unknown',
                name: 'Unknown Token'
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–Ω—Ç–µ
    async getTokenMintInfo(mintAddress) {
        try {
            const mintPubkey = new PublicKey(mintAddress);
            const mintAccount = await this.connection.getParsedAccountInfo(mintPubkey);
            
            if (mintAccount.value && mintAccount.value.data.parsed) {
                const mintData = mintAccount.value.data.parsed.info;
                
                // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                const signatures = await this.connection.getSignaturesForAddress(mintPubkey, { limit: 1 });
                let createdAt = null;
                
                if (signatures.length > 0) {
                    const firstSig = signatures[signatures.length - 1];
                    if (firstSig.blockTime) {
                        createdAt = new Date(firstSig.blockTime * 1000).toISOString();
                    }
                }
                
                return {
                    decimals: mintData.decimals,
                    mintAuthority: mintData.mintAuthority,
                    supply: mintData.supply,
                    isInitialized: mintData.isInitialized,
                    freezeAuthority: mintData.freezeAuthority,
                    createdAt
                };
            }
            
            return null;
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error getting mint info for ${mintAddress}:`, error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
    async getTokenSupply(mintAddress) {
        try {
            const mintPubkey = new PublicKey(mintAddress);
            return await this.connection.getTokenSupply(mintPubkey);
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Error getting token supply for ${mintAddress}:`, error.message);
            return null;
        }
    }

    // Batch –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
    async getTokensBatch(mintAddresses) {
        console.log(`[${new Date().toISOString()}] üöÄ Batch processing ${mintAddresses.length} tokens onchain`);
        const startTime = Date.now();
        
        const BATCH_SIZE = 10;
        const results = new Map();
        
        for (let i = 0; i < mintAddresses.length; i += BATCH_SIZE) {
            const batch = mintAddresses.slice(i, i + BATCH_SIZE);
            
            const batchPromises = batch.map(async (mint) => {
                try {
                    const tokenInfo = await this.getTokenInfo(mint);
                    return { mint, data: tokenInfo };
                } catch (error) {
                    console.error(`[${new Date().toISOString()}] ‚ùå Error in batch for ${mint}:`, error.message);
                    return { mint, data: null };
                }
            });
            
            const batchResults = await Promise.all(batchPromises);
            batchResults.forEach(({ mint, data }) => {
                results.set(mint, data);
            });
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if (i + BATCH_SIZE < mintAddresses.length) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        const duration = Date.now() - startTime;
        console.log(`[${new Date().toISOString()}] ‚úÖ Batch completed in ${duration}ms: ${results.size} tokens processed`);
        
        return results;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
    getStats() {
        return {
            rpcEndpoint: this.connection.rpcEndpoint,
            cacheSettings: {
                priceCache: this.PRICE_CACHE_TTL,
                metadataCache: this.METADATA_CACHE_TTL,
                poolCache: this.POOL_CACHE_TTL
            },
            supportedPrograms: Object.keys(this.PROGRAMS),
            knownMints: Object.keys(this.KNOWN_MINTS)
        };
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    async close() {
        await this.redis.quit();
        console.log(`[${new Date().toISOString()}] ‚úÖ OnChainTokenService closed`);
    }
}

module.exports = OnChainTokenService;