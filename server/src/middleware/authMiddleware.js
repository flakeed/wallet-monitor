// server/src/middleware/authMiddleware.js - –û–±—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const jwt = require('jsonwebtoken');
const crypto = require('crypto');

class AuthMiddleware {
    constructor(db) {
        this.db = db;
        this.JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-this';
        this.TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        
        // –ï–¥–∏–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.SHARED_SESSION = {
            token: 'shared-session-token-' + crypto.randomBytes(16).toString('hex'),
            created: Date.now(),
            // –≠—Ç–∞ —Å–µ—Å—Å–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏
            expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 –≥–æ–¥
        };
        
        console.log(`[${new Date().toISOString()}] üîë Shared session initialized: ${this.SHARED_SESSION.token}`);
    }

    // Verify Telegram auth data (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    verifyTelegramAuth(authData) {
        const { hash, ...data } = authData;
        
        if (!hash) {
            throw new Error('No hash provided');
        }

        // –î–ª—è –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–µ—à–∞
        if (hash === 'simple_auth' || hash === 'shared_session') {
            console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Skipping hash verification for shared session`);
            return true;
        }

        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try {
            const dataCheckString = Object.keys(data)
                .sort()
                .map(key => `${key}=${data[key]}`)
                .join('\n');

            const secretKey = crypto
                .createHash('sha256')
                .update(this.TELEGRAM_BOT_TOKEN)
                .digest();

            const calculatedHash = crypto
                .createHmac('sha256', secretKey)
                .update(dataCheckString)
                .digest('hex');

            return calculatedHash === hash;
        } catch (error) {
            console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Hash verification failed, allowing shared session anyway:`, error.message);
            return true; // –î–ª—è –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async createUserSession(userId) {
        console.log(`[${new Date().toISOString()}] üîÑ Returning shared session for user ${userId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.updateUserLastLogin(userId);
        
        return {
            session_token: this.SHARED_SESSION.token,
            expires_at: this.SHARED_SESSION.expiresAt
        };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserLastLogin(userId) {
        try {
            const query = `
                UPDATE users 
                SET last_login = NOW(), updated_at = NOW()
                WHERE id = $1
            `;
            await this.db.pool.query(query, [userId]);
        } catch (error) {
            console.warn(`[${new Date().toISOString()}] ‚ö†Ô∏è Failed to update last login for user ${userId}:`, error.message);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏
    async validateSession(sessionToken) {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∞—è —Å–µ—Å—Å–∏—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if (sessionToken === this.SHARED_SESSION.token) {
            console.log(`[${new Date().toISOString()}] ‚úÖ Shared session validated`);
            return {
                user_id: null, // –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                session_token: sessionToken,
                expires_at: this.SHARED_SESSION.expiresAt,
                is_shared: true
            };
        }
        
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        const query = `
            SELECT s.*, u.id as user_id, u.telegram_id, u.username, u.first_name, 
                   u.last_name, u.is_admin, u.is_active
            FROM sessions s
            JOIN users u ON s.user_id = u.id
            WHERE s.session_token = $1 AND s.expires_at > NOW() AND u.is_active = true
        `;
        
        const result = await this.db.pool.query(query, [sessionToken]);
        return result.rows[0] || null;
    }

    // Check if user is in whitelist
    async isUserWhitelisted(telegramId) {
        const query = `
            SELECT telegram_id FROM whitelist WHERE telegram_id = $1
            UNION
            SELECT telegram_id FROM users WHERE telegram_id = $1 AND is_active = true
        `;
        
        const result = await this.db.pool.query(query, [telegramId]);
        return result.rows.length > 0;
    }

    // Create or update user
    async createOrUpdateUser(telegramData) {
        const { id, username, first_name, last_name } = telegramData;
        
        const query = `
            INSERT INTO users (telegram_id, username, first_name, last_name, last_login)
            VALUES ($1, $2, $3, $4, NOW())
            ON CONFLICT (telegram_id) 
            DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                last_login = NOW(),
                updated_at = NOW()
            RETURNING *
        `;
        
        const result = await this.db.pool.query(query, [id, username, first_name, last_name]);
        return result.rows[0];
    }

    // Middleware function for protecting routes (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏)
    authRequired = async (req, res, next) => {
        try {
            const authHeader = req.headers.authorization;
            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                return res.status(401).json({ error: 'No valid authorization header' });
            }
    
            const sessionToken = authHeader.substring(7);
            const session = await this.validateSession(sessionToken);
            
            if (!session) {
                return res.status(401).json({ error: 'Invalid or expired session' });
            }
    
            // –î–ª—è –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if (session.is_shared) {
                const userIdHeader = req.headers['x-user-id'];
                const telegramIdHeader = req.headers['x-telegram-id'];
                
                console.log(`[${new Date().toISOString()}] üîç Shared session auth - telegramId: ${telegramIdHeader}, userId: ${userIdHeader}`);
                
                if (userIdHeader && userIdHeader !== 'shared-user') {
                    const user = await this.getUserById(userIdHeader);
                    if (user && user.is_active) {
                        req.user = {
                            id: user.id,
                            telegramId: user.telegram_id,
                            username: user.username,
                            firstName: user.first_name,
                            lastName: user.last_name,
                            isAdmin: user.is_admin,
                            isActive: user.is_active
                        };
                        req.isSharedSession = true;
                        console.log(`[${new Date().toISOString()}] ‚úÖ Shared session user loaded: ${user.username || user.first_name} (admin: ${user.is_admin})`);
                    } else {
                        return res.status(401).json({ error: 'Invalid user data in shared session' });
                    }
                } else if (telegramIdHeader) {
                    const user = await this.getUserByTelegramId(parseInt(telegramIdHeader));
                    if (user && user.is_active) {
                        req.user = {
                            id: user.id,
                            telegramId: user.telegram_id,
                            username: user.username,
                            firstName: user.first_name,
                            lastName: user.last_name,
                            isAdmin: user.is_admin,
                            isActive: user.is_active
                        };
                        req.isSharedSession = true;
                        console.log(`[${new Date().toISOString()}] ‚úÖ Shared session user loaded by telegram ID: ${user.username || user.first_name} (admin: ${user.is_admin})`);
                    } else {
                        return res.status(401).json({ error: 'Invalid user data in shared session' });
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    req.user = {
                        id: 'shared-user',
                        telegramId: null,
                        username: 'shared',
                        firstName: 'Shared',
                        lastName: 'User',
                        isAdmin: false,
                        isActive: true
                    };
                    req.isSharedSession = true;
                    console.log(`[${new Date().toISOString()}] ‚úÖ Default shared session user`);
                }
            } else {
                // –û–±—ã—á–Ω–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è
                req.user = {
                    id: session.user_id,
                    telegramId: session.telegram_id,
                    username: session.username,
                    firstName: session.first_name,
                    lastName: session.last_name,
                    isAdmin: session.is_admin,
                    isActive: session.is_active
                };
                req.isSharedSession = false;
                console.log(`[${new Date().toISOString()}] ‚úÖ Individual session user: ${session.username || session.first_name} (admin: ${session.is_admin})`);
            }
    
            next();
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Auth middleware error:`, error.message);
            res.status(401).json({ error: 'Authentication failed' });
        }
    };
    // Admin required middleware (–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏)
    adminRequired = async (req, res, next) => {
        try {
            console.log(`[${new Date().toISOString()}] üîë Admin access check - shared session: ${req.isSharedSession}`);
            
            if (req.isSharedSession) {
                // –í –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
                const telegramId = req.headers['x-telegram-id'];
                const userId = req.headers['x-user-id'];
                
                console.log(`[${new Date().toISOString()}] üîç Checking admin access - telegramId: ${telegramId}, userId: ${userId}`);
                
                let user = null;
                
                if (telegramId) {
                    user = await this.getUserByTelegramId(parseInt(telegramId));
                    console.log(`[${new Date().toISOString()}] üë§ User by telegram ID: ${user ? `${user.username || user.first_name} (admin: ${user.is_admin})` : 'not found'}`);
                } else if (userId && userId !== 'shared-user') {
                    user = await this.getUserById(userId);
                    console.log(`[${new Date().toISOString()}] üë§ User by user ID: ${user ? `${user.username || user.first_name} (admin: ${user.is_admin})` : 'not found'}`);
                }
                
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
                if (!user || !user.is_admin || !user.is_active) {
                    console.log(`[${new Date().toISOString()}] ‚ùå Admin access denied - user: ${user ? 'found' : 'not found'}, admin: ${user?.is_admin}, active: ${user?.is_active}`);
                    return res.status(403).json({ error: 'Admin access required' });
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                req.user = {
                    id: user.id,
                    telegramId: user.telegram_id,
                    username: user.username,
                    firstName: user.first_name,
                    lastName: user.last_name,
                    isAdmin: user.is_admin,
                    isActive: user.is_active
                };
                
                console.log(`[${new Date().toISOString()}] ‚úÖ Admin access granted for ${user.username || user.first_name} (${user.telegram_id})`);
            } else {
                // –û–±—ã—á–Ω–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è
                if (!req.user || !req.user.isAdmin) {
                    console.log(`[${new Date().toISOString()}] ‚ùå Admin access denied - individual session, user admin: ${req.user?.isAdmin}`);
                    return res.status(403).json({ error: 'Admin access required' });
                }
                console.log(`[${new Date().toISOString()}] ‚úÖ Admin access granted for individual session user ${req.user.id}`);
            }
            
            next();
        } catch (error) {
            console.error(`[${new Date().toISOString()}] ‚ùå Admin middleware error:`, error.message);
            res.status(500).json({ error: 'Authentication error' });
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    async getUserById(userId) {
        const query = `SELECT * FROM users WHERE id = $1`;
        const result = await this.db.pool.query(query, [userId]);
        return result.rows[0] || null;
    }

    // Get user by telegram ID
    async getUserByTelegramId(telegramId) {
        const query = `SELECT * FROM users WHERE telegram_id = $1`;
        const result = await this.db.pool.query(query, [telegramId]);
        return result.rows[0] || null;
    }

    // Add user to whitelist
    async addToWhitelist(telegramId, addedBy, notes = '') {
        const query = `
            INSERT INTO whitelist (telegram_id, added_by, notes)
            VALUES ($1, $2, $3)
            ON CONFLICT (telegram_id) DO UPDATE SET
                notes = EXCLUDED.notes,
                created_at = CURRENT_TIMESTAMP
            RETURNING *
        `;
        
        const result = await this.db.pool.query(query, [telegramId, addedBy, notes]);
        return result.rows[0];
    }

    // Remove user from whitelist
    async removeFromWhitelist(telegramId) {
        const query = `DELETE FROM whitelist WHERE telegram_id = $1`;
        await this.db.pool.query(query, [telegramId]);
    }

    // Get whitelist
    async getWhitelist() {
        const query = `
            SELECT w.*, u.username as added_by_username
            FROM whitelist w
            LEFT JOIN users u ON w.added_by = u.id
            ORDER BY w.created_at DESC
        `;
        
        const result = await this.db.pool.query(query);
        return result.rows;
    }

    // Clean expired sessions (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–±—â—É—é —Å–µ—Å—Å–∏—é)
    async cleanExpiredSessions() {
        const query = `DELETE FROM sessions WHERE expires_at < NOW()`;
        const result = await this.db.pool.query(query);
        return result.rowCount;
    }

    // Revoke user session (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async revokeSession(sessionToken) {
        if (sessionToken === this.SHARED_SESSION.token) {
            console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è Cannot revoke shared session`);
            return;
        }
        const query = `DELETE FROM sessions WHERE session_token = $1`;
        await this.db.pool.query(query, [sessionToken]);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–µ–π —Å–µ—Å—Å–∏–∏
    getSharedSessionInfo() {
        return {
            token: this.SHARED_SESSION.token,
            created: this.SHARED_SESSION.created,
            expiresAt: this.SHARED_SESSION.expiresAt,
            isShared: true
        };
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Å–µ—Å—Å–∏—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    regenerateSharedSession() {
        this.SHARED_SESSION = {
            token: 'shared-session-token-' + crypto.randomBytes(16).toString('hex'),
            created: Date.now(),
            expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
        };
        
        console.log(`[${new Date().toISOString()}] üîÑ Shared session regenerated: ${this.SHARED_SESSION.token}`);
        return this.SHARED_SESSION;
    }
}

module.exports = AuthMiddleware;